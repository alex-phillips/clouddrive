require 'thor'
require 'clouddrive'
require 'yaml'
require 'json'

module CloudDrive
  class CLI < Thor

    def initialize(*args)
      super
      @config_path = File.expand_path('~/.clouddrive') + "/"
    end

    desc "init", "Initialize app with Amazon e-mail and CloudDrive credentials"
    option :email, :aliases => :e
    option :client_id, :aliases => :i
    option :client_secret, :aliases => :s
    option :auth_url, :aliases => :u
    def init
      email = options[:email]
      client_id = options[:client_id]
      client_secret = options[:client_secret]

      config = read_config

      if email != nil
        config[:email] = email
      end

      if client_id != nil
        config[:client_id] = client_id
      end

      if client_secret != nil
        config[:client_secret] = client_secret
      end

      if config[:email] == nil
        puts "Email is required for authorization"
        exit
      end

      if config[:client_id] == nil || config[:client_secret] == nil
        puts "Amazon CloudDrive API credentials required"
        exit
      end

      save_config(config)

      account = CloudDrive::Account.new(config[:email], config[:client_id], config[:client_secret])
      result = account.authorize
      if result[:success] === false
        puts result[:data]["message"]
        if result[:data]["auth_url"]
          puts "Navigate to the following URL and paste in the redirect URL here."
          url = ask(result[:data]["auth_url"] + "\n")
          result = account.authorize(url)
          if result[:success]
            puts "Successfully authenticated with Amazon CloudDrive"
          else
            puts "Failed to authenticate with Amazon CloudDrive: #{result[:data].to_json}"
          end
        end
      else
        puts "Already authenticated with Amazon CloudDrive"
      end
    end

    desc "sync", "Sync local cache with Amazon CloudDrive"
    long_desc <<'LONGDESC'
    Syncing the nodes from Amazon CloudDrive to a local database allows for quicker
    API calls as well as the ability for some operations to be performed 'offline'.
    Before running any commands that alter data remotely, the local cache should
    always be synced up.
LONGDESC
    def sync
      setup
      authorize
      @account.sync
    end

    desc "clearcache", "Clear local nodes cache"
    def clearcache
      setup
      authorize
      @account.clear_cache
    end

    desc 'metadata REMOTE_PATH', 'Retrieve the node\'s metadata given its remote path'
    def metadata(path)
      setup
      authorize
      api = CloudDrive::Node.new(@account)

      if (node = api.find_by_path(path)) != nil
        puts node.to_json
      else
        puts "File does not exist."
      end
    end

    desc "mkdir REMOTE_PATH", "Create (recursively) a new remote directory"
    def mkdir(path)
      setup
      authorize
      node = CloudDrive::Node.new(@account)

      result = node.create_directory_path(path)
      if result[:success]
        puts "Successfully created new directory path: #{result[:data].to_json}"
      else
        puts "Failed to create new directory path: #{result[:data].to_json}"
      end
    end

    private

    def setup
      config = read_config
      @account = CloudDrive::Account.new(config[:email], config[:client_id], config[:client_secret])
    end

    def authorize
      result = @account.authorize
      if result[:success] == false
        puts "Failed to authorize account. Please run 'clouddrive init'."
        exit
      end
    end

    def read_config
      if File.exists?("#{@config_path}config.yaml")
        return YAML.load_file("#{@config_path}config.yaml")
      else
        if !File.exists?(@config_path)
          Dir.mkdir(@config_path)
        end
      end

      {
          :email => nil,
          :client_id => nil,
          :client_secret => nil
      }
    end

    def save_config config
      if !File.exists?(@config_path)
        Dir.mkdir(@config_path)
      end

      File.open("#{@config_path}config.yaml", 'w') do |file|
        file.write(config.to_yaml)
      end
    end

  end
end

CloudDrive::CLI.start( ARGV )
